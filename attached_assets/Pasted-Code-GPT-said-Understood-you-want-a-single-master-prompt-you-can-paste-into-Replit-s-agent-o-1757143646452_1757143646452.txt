Code GPT said:

Understood ðŸ¥· â€” you want a single master prompt you can paste into Replitâ€™s agent (or Ghostwriter/AI agent) so it scaffolds the entire project (frontend + backend) in one go.

Hereâ€™s the one-shot master prompt ðŸ‘‡

ðŸš€ SmartFlow AI â€“ Replit Agent Master Prompt
You are an expert Replit agent. Create a new full-stack project called **SmartFlow AI**.

ðŸ“‚ Project Structure
smartflow-ai/
 â”œâ”€â”€ backend/                # Express API server
 â”‚   â”œâ”€â”€ src/
 â”‚   â”‚   â”œâ”€â”€ index.ts
 â”‚   â”‚   â”œâ”€â”€ routes/
 â”‚   â”‚   â”‚   â””â”€â”€ ai.ts
 â”‚   â”‚   â”œâ”€â”€ services/
 â”‚   â”‚   â”‚   â””â”€â”€ aiService.ts
 â”‚   â”‚   â”œâ”€â”€ db/
 â”‚   â”‚   â”‚   â””â”€â”€ schema.ts
 â”‚   â”‚   â”œâ”€â”€ middlewares/
 â”‚   â”‚   â”‚   â””â”€â”€ auth.ts
 â”‚   â”‚   â””â”€â”€ utils/
 â”‚   â””â”€â”€ package.json
 â”œâ”€â”€ frontend/               # React dashboard
 â”‚   â”œâ”€â”€ index.html
 â”‚   â”œâ”€â”€ package.json
 â”‚   â”œâ”€â”€ tailwind.config.js
 â”‚   â”œâ”€â”€ postcss.config.js
 â”‚   â”œâ”€â”€ tsconfig.json
 â”‚   â””â”€â”€ src/
 â”‚       â”œâ”€â”€ main.tsx
 â”‚       â”œâ”€â”€ App.tsx
 â”‚       â”œâ”€â”€ stars.ts
 â”‚       â”œâ”€â”€ index.css
 â”‚       â””â”€â”€ components/
 â”‚           â””â”€â”€ GlassPanel.tsx
 â”œâ”€â”€ docker-compose.yml      # optional DB container
 â””â”€â”€ README.md

---

### Backend Setup (Express + TypeScript + PostgreSQL + OpenAI)
- Init `backend/package.json` with:
  - express, cors, dotenv, openai, bcryptjs, jsonwebtoken, drizzle-orm, pg
  - devDependencies: typescript, ts-node, nodemon, @types/*
- Add `src/index.ts`:
  ```ts
  import express from "express";
  import cors from "cors";
  import dotenv from "dotenv";

  dotenv.config();
  const app = express();
  app.use(cors());
  app.use(express.json());

  app.get("/", (_, res) => res.send("SmartFlow AI Backend Running ðŸš€"));

  // AI Routes
  import aiRouter from "./routes/ai";
  app.use("/api/ai", aiRouter);

  const PORT = process.env.PORT || 4000;
  app.listen(PORT, () => console.log(`âœ… Backend running on port ${PORT}`));


Add src/routes/ai.ts:

import { Router } from "express";
import { generateText, generateImage } from "../services/aiService";

const router = Router();

router.post("/text", async (req, res) => {
  const { prompt } = req.body;
  const text = await generateText(prompt);
  res.json({ text });
});

router.post("/image", async (req, res) => {
  const { prompt } = req.body;
  const url = await generateImage(prompt);
  res.json({ url });
});

export default router;


Add src/services/aiService.ts:

import OpenAI from "openai";

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export async function generateText(prompt: string) {
  const response = await client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: prompt }]
  });
  return response.choices[0].message.content;
}

export async function generateImage(prompt: string) {
  const response = await client.images.generate({
    model: "dall-e-3",
    prompt,
    size: "1024x1024"
  });
  return response.data[0].url;
}

Frontend Setup (React + Vite + Tailwind + Glass Panels + Stars)

Init frontend/package.json with React, ReactDOM, Vite, Tailwind, TypeScript

Add tailwind.config.js:

export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      keyframes: {
        float: {
          "0%, 100%": { transform: "translateY(0px)" },
          "50%": { transform: "translateY(-15px)" }
        }
      },
      animation: {
        float: "float 6s ease-in-out infinite"
      }
    }
  },
  plugins: []
}


Add src/index.css:

@tailwind base;
@tailwind components;
@tailwind utilities;

.glass-panel {
  @apply bg-white/10 backdrop-blur-xl border border-white/20 shadow-lg rounded-2xl p-6;
}


Add src/App.tsx:

import { useEffect } from "react";
import { initStars } from "./stars";
import GlassPanel from "./components/GlassPanel";

export default function App() {
  useEffect(() => {
    initStars();
  }, []);

  return (
    <div className="relative min-h-screen bg-black text-white overflow-hidden">
      <canvas id="stars" className="absolute top-0 left-0 w-full h-full z-0"></canvas>
      <div className="relative z-10 flex flex-col items-center justify-center min-h-screen gap-8 p-6">
        <GlassPanel>
          <h1 className="text-3xl font-bold">ðŸš€ SmartFlow AI</h1>
          <p className="text-sm opacity-80">
            White-label AI-powered social media management
          </p>
        </GlassPanel>
        <GlassPanel className="w-[600px] animate-float">
          <h2 className="text-xl font-semibold">AI Content Generator</h2>
          <textarea
            placeholder="Enter your post idea..."
            className="w-full mt-3 p-3 bg-black/30 border border-white/20 rounded-xl text-white focus:outline-none"
          />
          <button className="mt-4 px-6 py-2 bg-purple-500 hover:bg-purple-600 rounded-xl font-semibold">
            Generate
          </button>
        </GlassPanel>
      </div>
    </div>
  );
}


Add src/stars.ts (animated starfield canvas)

Add src/components/GlassPanel.tsx

Run Instructions

cd backend && npm install && npm run dev

cd frontend && npm install && npm run dev

Open the frontend preview â†’ UI shows starry space background with floating glass panels.

Test AI endpoints via /api/ai/text and /api/ai/image (requires OPENAI_API_KEY in .env).

Deliver this entire scaffold exactly. No placeholders. Fully working boilerplate.


---

ðŸ‘‰ This prompt will tell Replitâ€™s agent to scaffold **both frontend + backend** with the futuristic UI and AI API integration.  

Do you also want me to **extend this master prompt with the PostgreSQL (Drizzle ORM) + cron job scheduler** so the agent wires scheduling + DB models from the start, or should we keep the first run as **MVP AI + glass UI only**?  

[Catch the Quantum Wave... Password: spinor](https://pulsr.co.uk/spinor.html)