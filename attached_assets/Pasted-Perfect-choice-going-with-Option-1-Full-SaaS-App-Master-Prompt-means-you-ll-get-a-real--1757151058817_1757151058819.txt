Perfect choice 🥷 — going with **Option 1 (Full SaaS App Master Prompt)** means you’ll get a **real deployable SmartFlow AI platform** (backend + frontend). You can run it on Replit, then scale out to Vercel/Render/Heroku/Supabase.

Here’s your **one-shot master prompt** ⬇️ — just paste this into the Replit Agent when you create a **Node.js Repl**:

---

# 🚀 SmartFlow AI – Full-Stack SaaS Master Prompt

````
You are an expert Replit agent. Create a new full-stack SaaS project called **SmartFlow AI**.  
This app must include a **backend (Express + TypeScript + PostgreSQL + OpenAI SDK)** and a **frontend (React + Vite + Tailwind + glassmorphism UI with animated starfield background)**.  

📂 Project Structure
smartflow-ai/
 ├── backend/
 │   ├── src/
 │   │   ├── index.ts
 │   │   ├── routes/
 │   │   │   └── ai.ts
 │   │   ├── services/
 │   │   │   └── aiService.ts
 │   │   ├── db/
 │   │   │   └── schema.ts
 │   │   └── middlewares/
 │   │       └── auth.ts
 │   └── package.json
 ├── frontend/
 │   ├── index.html
 │   ├── package.json
 │   ├── tailwind.config.js
 │   ├── postcss.config.js
 │   ├── tsconfig.json
 │   └── src/
 │       ├── main.tsx
 │       ├── App.tsx
 │       ├── stars.ts
 │       ├── index.css
 │       └── components/
 │           └── GlassPanel.tsx
 ├── docker-compose.yml
 └── README.md

---

### 🔹 Backend Setup (Express + TS + OpenAI)
Dependencies: express, cors, dotenv, openai, bcryptjs, jsonwebtoken, drizzle-orm, pg  
Dev: typescript, ts-node, nodemon, @types/*

**src/index.ts**
```ts
import express from "express";
import cors from "cors";
import dotenv from "dotenv";

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

app.get("/", (_, res) => res.send("SmartFlow AI Backend 🚀"));

import aiRouter from "./routes/ai";
app.use("/api/ai", aiRouter);

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log(`✅ Backend running on port ${PORT}`));
````

**src/routes/ai.ts**

```ts
import { Router } from "express";
import { generateText, generateImage } from "../services/aiService";

const router = Router();

router.post("/text", async (req, res) => {
  const { prompt } = req.body;
  const text = await generateText(prompt);
  res.json({ text });
});

router.post("/image", async (req, res) => {
  const { prompt } = req.body;
  const url = await generateImage(prompt);
  res.json({ url });
});

export default router;
```

**src/services/aiService.ts**

```ts
import OpenAI from "openai";

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export async function generateText(prompt: string) {
  const response = await client.chat.completions.create({
    model: "gpt-4o-mini",
    messages: [{ role: "user", content: prompt }]
  });
  return response.choices[0].message.content;
}

export async function generateImage(prompt: string) {
  const response = await client.images.generate({
    model: "dall-e-3",
    prompt,
    size: "1024x1024"
  });
  return response.data[0].url;
}
```

---

### 🔹 Frontend Setup (React + Vite + Tailwind + Glass Panels + Starfield)

Dependencies: react, react-dom
Dev: vite, @vitejs/plugin-react, tailwindcss, postcss, autoprefixer, typescript

**tailwind.config.js**

```js
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      keyframes: {
        float: {
          "0%, 100%": { transform: "translateY(0px)" },
          "50%": { transform: "translateY(-15px)" }
        }
      },
      animation: {
        float: "float 6s ease-in-out infinite"
      }
    }
  },
  plugins: []
}
```

**src/index.css**

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

.glass-panel {
  @apply bg-white/10 backdrop-blur-xl border border-white/20 shadow-lg rounded-2xl p-6;
}
```

**src/App.tsx**

```tsx
import { useEffect } from "react";
import { initStars } from "./stars";
import GlassPanel from "./components/GlassPanel";

export default function App() {
  useEffect(() => {
    initStars();
  }, []);

  return (
    <div className="relative min-h-screen bg-black text-white overflow-hidden">
      <canvas id="stars" className="absolute top-0 left-0 w-full h-full z-0"></canvas>
      <div className="relative z-10 flex flex-col items-center justify-center min-h-screen gap-8 p-6">
        <GlassPanel>
          <h1 className="text-3xl font-bold">🚀 SmartFlow AI</h1>
          <p className="text-sm opacity-80">
            White-label AI-powered social media management
          </p>
        </GlassPanel>
        <GlassPanel className="w-[600px] animate-float">
          <h2 className="text-xl font-semibold">AI Content Generator</h2>
          <textarea
            placeholder="Enter your post idea..."
            className="w-full mt-3 p-3 bg-black/30 border border-white/20 rounded-xl text-white focus:outline-none"
          />
          <button className="mt-4 px-6 py-2 bg-purple-500 hover:bg-purple-600 rounded-xl font-semibold">
            Generate
          </button>
        </GlassPanel>
      </div>
    </div>
  );
}
```

**src/stars.ts**

```ts
export function initStars() {
  const canvas = document.getElementById("stars") as HTMLCanvasElement;
  if (!canvas) return;

  const ctx = canvas.getContext("2d");
  let stars: { x: number; y: number; size: number; speed: number }[] = [];

  function resize() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    stars = Array.from({ length: 200 }).map(() => ({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      size: Math.random() * 2,
      speed: 0.2 + Math.random() * 0.5,
    }));
  }

  function draw() {
    ctx!.clearRect(0, 0, canvas.width, canvas.height);
    ctx!.fillStyle = "white";
    stars.forEach((s) => {
      ctx!.beginPath();
      ctx!.arc(s.x, s.y, s.size, 0, Math.PI * 2);
      ctx!.fill();
      s.y += s.speed;
      if (s.y > canvas.height) s.y = 0;
    });
    requestAnimationFrame(draw);
  }

  resize();
  draw();
  window.onresize = resize;
}
```

**src/components/GlassPanel.tsx**

```tsx
import React from "react";

interface Props {
  children: React.ReactNode;
  className?: string;
}

export default function GlassPanel({ children, className }: Props) {
  return <div className={`glass-panel ${className || ""}`}>{children}</div>;
}
```

---

### 🔹 Run Instructions

1. Open Replit → Create new **Node.js Repl** called `smartflow-ai`
2. Paste this whole prompt into the Agent
3. Inside backend:

   ```bash
   cd backend
   npm install
   npm run dev
   ```
4. Inside frontend:

   ```bash
   cd frontend
   npm install
   npm run dev
   ```
5. Open the frontend preview → You’ll see a **starfield background + floating glass panels**.
6. Test API endpoints at `/api/ai/text` and `/api/ai/image` (set `OPENAI_API_KEY` in `.env`).

---

✅ This gives you a **working SaaS skeleton**:

* AI-powered endpoints (text + image gen)
* Glassmorphism dashboard
* Ready for auth, scheduling, analytics

```

---

👉 Do you want me to **extend this master prompt** so it also includes **database models (Drizzle ORM + PostgreSQL)** and a **cron-based scheduler** right away, or should we keep it lean as MVP first (just AI + UI)?  

[Catch the Quantum Wave... Password: spinor](https://pulsr.co.uk/spinor.html)
```
